name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  cluster-dependencies:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - name: VCPKG Install
      run: vcpkg install vcpkg-cmake:x64-windows readline:x64-windows lua:x64-windows zlib:x64-windows sol2:x64-windows libmysql:x64-windows mysql-connector-cpp:x64-windows
    
    - name: VCPKG Install Boost
      run: vcpkg install boost-log:x64-windows boost-filesystem:x64-windows boost-system:x64-windows boost-test:x64-windows boost-locale:x64-windows boost-crc:x64-windows boost-multi-array:x64-windows

    - name : VCPKG Integrate
      run: vcpkg integrate install

  testing:
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build
      run: cmake -B ${{github.workspace}}\build -DWITHOUT_SERVERS=1 -DWITH_TESTS=1 -DCMAKE_INSTALL_PREFIX="${{github.workspace}}\build";
          cmake --build ${{github.workspace}}\build --config Release;
    - name: Run
      run: 
        files=$(find ${{github.workspace}}\src\Tests -type f -iname "*Test.cpp");
        for f in ${files[@]};
        do
          t=$(basename ${f::-4});
          ${{github.workspace}}\build\test\Release\${t}.exe;
        done
      
  build-and-install:
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure Step & Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: . cmake -B ${{github.workspace}}\build -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\build"  
    - name: Install
      run: cp ${{github.workspace}}\db ${{github.workspace}}\build\bin\Release\ -r;
        cp ${{github.workspace}}\scripts ${{github.workspace}}\build\bin\Release\ -r;
        cp ${{github.workspace}}\config ${{github.workspace}}\build\bin\Release\ -r;
        mv ${{github.workspace}}\build\bin\Release\config\auth-server.lua.dist ${{github.workspace}}\build\bin\Release\config\auth-server.lua;
        mv ${{github.workspace}}\build\bin\Release\config\char-server.lua.dist ${{github.workspace}}\build\bin\Release\config\char-server.lua;
        mv ${{github.workspace}}\build\bin\Release\config\zone-server.lua.dist ${{github.workspace}}\build\bin\Release\config\zone-server.lua;
    
    - name: Install Database
      run:
        mysql root horizon --execute="CREATE DATABASE horizon;";
        mysql root horizon --database=horizon < ${{github.workspace}}\sql-files\horizon.sql;
        mysql root horizon --execute="GRANT SELECT, INSERT, UPDATE, DELETE ON horizon.* TO 'horizon'@'localhost' IDENTIFIED BY 'horizon';"
    - name: Run
      working-directory: ${{github.workspace}}\build\bin\Release
      run: ./auth.exe --with-config="config\auth-server.lua" --test-run
           ./char.exe --with-config="config\char-server.lua" --test-run
           ./zone.exe --with-config="config\zone-server.lua" --test-run
      
  cleanup:
    runs-on: self-hosted
    steps:
    - name: Cleanup
      run: mysql root horizon --execute="DROP DATABASE IF EXISTS `horizon`;"
