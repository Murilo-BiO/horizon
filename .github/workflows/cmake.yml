name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  MYSQL_PASSWORD: horizon
  MYSQL_USERNAME: root
  MYSQL_DATABASE: horizon
  MYSQL_HOSTNAME: localhost

jobs:
  Ubuntu-GCC-Libraries:
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITHOUT_SERVERS=true
        make
  Ubuntu-GCC-Tests-Tools:
    needs: Ubuntu-GCC-Libraries
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true
        make
  Ubuntu-GCC-Servers:
    needs: Ubuntu-GCC-Tests-Tools
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++"
        make
  Ubuntu-GCC-ALL-ASAN:
    needs: Ubuntu-GCC-Servers
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_ASAN=true
        make
  Ubuntu-GCC-Run-ASAN:
    needs: Ubuntu-GCC-ALL-ASAN
    runs-on: Ubuntu
    steps:
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Ubuntu-GCC-ALL-TSAN:
    needs: Ubuntu-GCC-Servers
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_TSAN=true
        make
  Ubuntu-GCC-Run-TSAN:
    needs: Ubuntu-GCC-ALL-TSAN
    runs-on: Ubuntu
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Ubuntu-Clang-Libraries:
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITHOUT_SERVERS=true
        make
  Ubuntu-Clang-Tests-Tools:
    needs: Ubuntu-Clang-Libraries
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true
        make
  Ubuntu-Clang-Servers:
    needs: Ubuntu-Clang-Tests-Tools
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++"
        make
  Ubuntu-Clang-ALL-ASAN:
    needs: Ubuntu-Clang-Servers
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS= -DWITH_ASAN=true
        make
  Ubuntu-Clang-Run-ASAN:
    needs: Ubuntu-Clang-ALL-ASAN
    runs-on: Ubuntu
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Ubuntu-Clang-ALL-TSAN:
    needs: Ubuntu-Clang-Servers
    runs-on: Ubuntu
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TSAN=true
        make
  Ubuntu-Clang-Run-TSAN:
    needs: Ubuntu-Clang-ALL-TSAN
    runs-on: Ubuntu
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
        
  Debian-GCC-Libraries:
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITHOUT_SERVERS=true
        make
  Debian-GCC-Tests-Tools:
    needs: Debian-GCC-Libraries
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true
        make
  Debian-GCC-Servers:
    needs: Debian-GCC-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++"
        make
  Debian-GCC-ALL-ASAN:
    needs: Debian-GCC-Servers
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_ASAN=true
        make
  Debian-GCC-Run-ASAN:
    needs: Debian-GCC-ALL-ASAN
    runs-on: Debian
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-GCC-ALL-TSAN:
    needs: Debian-GCC-Servers
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_TSAN=true
        make
  Debian-GCC-Run-TSAN:
    needs: Debian-GCC-ALL-TSAN
    runs-on: Debian
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-Libraries:
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITHOUT_SERVERS=true
        make
  Debian-Clang-Tests-Tools:
    needs: Debian-Clang-Libraries
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true
        make
  Debian-Clang-Servers:
    needs: Debian-Clang-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++"
        make
  Debian-Clang-ALL-ASAN:
    needs: Debian-Clang-Servers
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS= -DWITH_ASAN=true
        make
  Debian-Clang-Run-ASAN:
    needs: Debian-Clang-ALL-ASAN
    runs-on: Debian
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-ALL-TSAN:
    needs: Debian-Clang-Servers
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure & Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TSAN=true
        make
  Debian-Clang-Run-TSAN:
    needs: Debian-Clang-ALL-TSAN
    runs-on: Debian
    steps: 
    - name: Run
      run: |
        cd build/bin
        cp ../../config config -r
        cp ../../db db -r
        cp ../../scripts scripts -r
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run

  Windows-Libraries:
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build
      run: sh ./horizon.sh build-only-libraries -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows

  Windows-Tests:
    needs: Windows-Libraries
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Build
      run: sh ./horizon.sh build-tests -DCMAKE_INSTALL_PREFIX="${{github.workspace}}\build" -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows
    
    - name: Run
      run: sh ./horizon.sh run-tests "build\test\Release"
      
  Windows-Tools:
    needs: Windows-Tests
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Build
      run: sh ./horizon.sh build-tools -DCMAKE_INSTALL_PREFIX="${{github.workspace}}\build" -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows
    
  Windows-Servers:
    needs: [ Windows-Tests, Windows-Tools, Windows-Libraries ]
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v3
   
    - name: Configure Step & Build
      run: sh ./horizon.sh build ${{github.workspace}}\build -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX="${{github.workspace}}\build" 

    # Uncomment when we have some more information on why its failing?  
    #- name: Run Auth
    #  working-directory: ${{github.workspace}}\build\bin\Release
    #  run: |
    #    ./auth.exe --with-config="config\auth-server.lua" --test-run 
    #    ./char.exe --with-config="config\char-server.lua" --test-run
    #    ./zone.exe --with-config="config\zone-server.lua" --test-run 
